/**
 * @file execute.c
 *
 * @brief Implements interface functions between Quash and the environment and
 * functions that interpret an execute commands.
 *
 * @note As you add things to this file you may want to change the method signature
 */

#include "execute.h"
#include <stdio.h>
#include "quash.h"
#include "deque.h"
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <signal.h>

IMPLEMENT_DEQUE_STRUCT(PIDDeque, pid_t);
IMPLEMENT_DEQUE(PIDDeque, pid_t);

typedef struct Job{
    int job_id;
    char* cmd;
    PIDDeque pid_list;
}Job;

static Job newJob(){
    return(Job){0, get_command_string(), new_PIDDeque(1),};
}

static void destroy_job(Job job){
    if(job.cmd != NULL){
        free(job.cmd);
    }
    destroy_PIDDeque(&job.pid_list);
}

IMPLEMENT_DEQUE_STRUCT(JobDeque, Job);
IMPLEMENT_DEQUE(JobDeque, Job);

JobDeque jobs;

typedef struct Exec{
    int count;
    int pfd[2][2];
    Job job;
}Exec;

static void init_exec(Exec* exec){
    assert(exec != NULL);
    exec -> count = 0;
    exec -> job = newJob();
}

static void destroy_exec(Exec* exec){
  assert(exec != NULL);
  destroy_job(exec -> job);
}

/***************************************************************************
 * Interface Functions
 ***************************************************************************/

// Return a string containing the current working directory.
char* get_current_directory(bool* should_free) {
  char *curDir = NULL;
  curDir = getcwd(NULL, 0);

  // Change this to true if necessary
  *should_free = true;
  return curDir;
}

// Returns the value of an environment variable env_var
const char* lookup_env(const char* env_var) {
  char *curEnv;
  curEnv = getenv(env_var);
  return curEnv;
}

// Check the status of background jobs
void check_jobs_bg_status() {
  if(is_empty_JobDeque(&jobs)){
      return;
  }
  int lj = length_JobDeque(&jobs);
  for(int i = 0; i < lj; i++){
      Job newJob = pop_front_JobDeque(&jobs);
      int lp = length_PIDDeque(&newJob.pid_list);
      pid_t p = peek_front_PIDDeque(&newJob.pid_list);
      for(int j = 0; j < lp; j++){
          int status;
          pid_t p2 = pop_front_PIDDeque(&newJob.pid_list);
          pid_t p3 = waitpid(p2, &status, WNOHANG);
          if(p3 == 0){
              push_back_PIDDeque(&newJob.pid_list, p3);
          }
      }
      if(is_empty_PIDDeque(&newJob.pid_list)){
          print_job_bg_complete(newJob.job_id, p, newJob.cmd);
          destroy_job(newJob);
      }else{
          push_back_JobDeque(&jobs, newJob);
      }
  }
}

// Prints the job id number, the process id of the first process belonging to
// the Job, and the command string associated with this job
void print_job(int job_id, pid_t pid, const char* cmd) {
  printf("[%d]\t%8d\t%s\n", job_id, pid, cmd);
  fflush(stdout);
}

// Prints a start up message for background processes
void print_job_bg_start(int job_id, pid_t pid, const char* cmd) {
  printf("Background job started: ");
  print_job(job_id, pid, cmd);
}

// Prints a completion message followed by the print job
void print_job_bg_complete(int job_id, pid_t pid, const char* cmd) {
  printf("Completed: \t");
  print_job(job_id, pid, cmd);
}

/***************************************************************************
 * Functions to process commands
 ***************************************************************************/
// Run a program reachable by the path environment variable, relative path, or
// absolute path
void run_generic(GenericCommand cmd) {
  // Execute a program with a list of arguments. The `args` array is a NULL
  // terminated (last string is always NULL) list of strings. The first element
  // in the array is the executable
  char* exec = cmd.args[0];
  char** args = cmd.args;
  execvp(exec, args);
  //perror("ERROR: Failed to execute program");
}

// Print strings
void run_echo(EchoCommand cmd) {
  // Print an array of strings. The args array is a NULL terminated (last
  // string is always NULL) list of strings.
  char** str = cmd.args;
  while(*str != NULL){
      printf("%s ", *str);
      str++;
  }
  printf("\n");

  // Flush the buffer before returning
  fflush(stdout);
}

// Sets an environment variable
void run_export(ExportCommand cmd) {
  // Write an environment variable
  const char* env_var = cmd.env_var;
  const char* val = cmd.val;
  setenv(env_var, val, 1);
}

// Changes the current working directory
void run_cd(CDCommand cmd){
  // Get the directory name
  const char* dir = cmd.dir;

  // Check if the directory is valid
  if (dir == NULL) {
    perror("ERROR: Failed to resolve path");
    return;
  }
  chdir(dir);
  setenv("OLD_PWD", lookup_env("PWD"), 1);
  setenv("PWD", dir, 1);
}

// Sends a signal to all processes contained in a job
void run_kill(KillCommand cmd) {
    //Unfinished function
  /*
  int signal = cmd.sig;
  int job_id = cmd.job;

  (void) signal; // Silence unused variable warning
  (void) job_id; // Silence unused variable warning
  */
}


// Prints the current working directory to stdout
void run_pwd() {
  bool b = false;
  char *dir = get_current_directory(&b);
  fprintf(stdout, "%s\n", dir);
  free(dir);
  // Flush the buffer before returning
  fflush(stdout);
}

static void print_job_helper(Job job){
  print_job(job.job_id, peek_front_PIDDeque(&job.pid_list), job.cmd);
}

// Prints all background jobs currently in the job list to stdout
void run_jobs() {
  apply_JobDeque(&jobs, print_job_helper);
  // Flush the buffer before returning
  fflush(stdout);
}

/***************************************************************************
 * Functions for command resolution and process setup
 ***************************************************************************/

/**
 * @brief A dispatch function to resolve the correct @a Command variant
 * function for child processes.
 *
 * This version of the function is tailored to commands that should be run in
 * the child process of a fork.
 *
 * @param cmd The Command to try to run
 *
 * @sa Command
 */
void child_run_command(Command cmd) {
  CommandType type = get_command_type(cmd);

  switch (type) {
  case GENERIC:
    run_generic(cmd.generic);
    break;

  case ECHO:
    run_echo(cmd.echo);
    break;

  case PWD:
    run_pwd();
    break;

  case JOBS:
    run_jobs();
    break;

  case EXPORT:
  case CD:
  case KILL:
  case EXIT:
  case EOC:
    break;

  default:
    fprintf(stderr, "Unknown command type: %d\n", type);
  }
}

/**
 * @brief A dispatch function to resolve the correct @a Command variant
 * function for the quash process.
 *
 * This version of the function is tailored to commands that should be run in
 * the parent process (quash).
 *
 * @param cmd The Command to try to run
 *
 * @sa Command
 */
void parent_run_command(Command cmd) {
  CommandType type = get_command_type(cmd);

  switch (type) {
  case EXPORT:
    run_export(cmd.export);
    break;

  case CD:
    run_cd(cmd.cd);
    break;

  case KILL:
    run_kill(cmd.kill);
    break;

  case GENERIC:
  case ECHO:
  case PWD:
  case JOBS:
  case EXIT:
  case EOC:
    break;

  default:
    fprintf(stderr, "Unknown command type: %d\n", type);
  }
}

/**
 * @brief Creates one new process centered around the @a Command in the @a
 * CommandHolder setting up redirects and pipes where needed
 *
 * @note Processes are not the same as jobs. A single job can have multiple
 * processes running under it. This function creates a process that is part of a
 * larger job.
 *
 * @note Not all commands should be run in the child process. A few need to
 * change the quash process in some way
 *
 * @param holder The CommandHolder to try to run
 *
 * @sa Command CommandHolder
 */
void create_process(CommandHolder holder, Exec *exec) {
  // Read the flags field from the parser
  bool p_in  = holder.flags & PIPE_IN;
  bool p_out = holder.flags & PIPE_OUT;
  bool r_in  = holder.flags & REDIRECT_IN;
  bool r_out = holder.flags & REDIRECT_OUT;
  bool r_app = holder.flags & REDIRECT_APPEND; // This can only be true if r_out
                                               // is true

  if(p_out){
      pipe(exec->pfd[exec->count % 2]);
  }
  pid_t pid;
  pid = fork();

  if(pid == 0){
      if(p_in){
          close(exec->pfd[(exec->count + 1) % 2][1]);
          dup2(exec->pfd[(exec->count + 1) % 2][0], STDIN_FILENO);
          close(exec->pfd[(exec->count + 1) % 2][0]);
      }
      if(p_out){
          close(exec->pfd[(exec->count) % 2][0]);
          dup2(exec->pfd[(exec->count) % 2][1], STDOUT_FILENO);
          close(exec->pfd[(exec->count) % 2][1]);
      }
      //int i;
      if(r_in){
          int i = open(holder.redirect_in, O_RDONLY);
          dup2(i,STDIN_FILENO);
          close(i);
      }
      int j;
      if(r_out){
          if(r_app){
              j = open(holder.redirect_out, O_WRONLY | O_APPEND | O_CREAT, 0664);
          }else{
              j = open(holder.redirect_out, O_WRONLY | O_TRUNC | O_CREAT, 0664);
          }
          dup2(j, STDOUT_FILENO);
          close(j);
      }
      destroy_exec(exec);
      child_run_command(holder.cmd);
      exit(EXIT_SUCCESS);
    }else{
        push_back_PIDDeque(&exec -> job.pid_list, pid);
        parent_run_command(holder.cmd);
    }
    if(p_in){
        close(exec->pfd[(exec->count + 1) % 2][0]);
        close(exec->pfd[(exec->count + 1) % 2][1]);
    }
    exec->count++;
}

// Run a list of commands
void run_script(CommandHolder* holders) {
    static bool first = true;
    if(holders == NULL){
        return;
    }

    if(first == true){
        jobs = new_destructable_JobDeque(2, destroy_job);
        first = false;
    }
    check_jobs_bg_status();

    if (get_command_holder_type(holders[0]) == EXIT && get_command_holder_type(holders[1]) == EOC) {
        end_main_loop();
        return;
    }

    CommandType type;
    Exec exec;
    init_exec(&exec);

    // Run all commands in the `holder` array
    for (int i = 0; (type = get_command_holder_type(holders[i])) != EOC; i++){
        create_process(holders[i], &exec);
    }

    if (!(holders[0].flags & BACKGROUND)) {
        // Not a background Job
        while(!is_empty_PIDDeque(&exec.job.pid_list)){
            int status = 0;
            waitpid(pop_front_PIDDeque(&exec.job.pid_list), &status, 0);
        }
        destroy_exec(&exec);
    }else{
          // A background job.
          if(is_empty_JobDeque(&jobs)){
            exec.job.job_id = 1;
          }else{
            exec.job.job_id = ((peek_back_JobDeque(&jobs).job_id + 1));
          }
          push_back_JobDeque(&jobs, exec.job);
          print_job_bg_start(exec.job.job_id, peek_front_PIDDeque(&exec.job.pid_list), exec.job.cmd);
    }
}
