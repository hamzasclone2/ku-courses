/** @file libpriqueue.c
 */

#include <stdlib.h>
#include <stdio.h>

#include "libpriqueue.h"


/**
  Initializes the priqueue_t data structure.

  Assumtions
    - You may assume this function will only be called once per instance of priqueue_t
    - You may assume this function will be the first function called using an instance of priqueue_t.
  @param q a pointer to an instance of the priqueue_t data structure
  @param comparer a function pointer that compares two elements.
  See also @ref comparer-page
 */
void priqueue_init(priqueue_t *q, int(*comparer)(const void *, const void *))
{
	q->size = 0;
	q->head = NULL;
	q->comparer = comparer;
}


/**
  Inserts the specified element into this priority queue.

  @param q a pointer to an instance of the priqueue_t data structure
  @param ptr a pointer to the data to be inserted into the priority queue
  @return The zero-based index where ptr is stored in the priority queue, where 0 indicates that ptr was stored at the front of the priority queue.
 */
int priqueue_offer(priqueue_t *q, void *ptr)
{
	item *temp = q->head;
	item *temp2;
	item *new = malloc(sizeof(item*));
	new->ptr = ptr;
	if(q->size == 0){
		new->next = NULL;
		q->head = new;
		q->size++;
		return 0;
	}else{
		for(int i = 0; i <= q->size; i++){
			if(temp == NULL){
				temp2->next = new;
				new->next = NULL;
				q->size++;
				return i;
			}
			if(q->comparer(temp->ptr, ptr) > 0){
				if(temp == q->head){
					new->next = temp;
					q->head = new;
					q->size++;
					return 0;
				}else{
					temp2->next = new;
					new->next = temp;
					q->size++;
					return i;
				}
			}
			temp2 = temp;
			temp = temp -> next;
		}
		return -1;
	}
}


/**
  Retrieves, but does not remove, the head of this queue, returning NULL if
  this queue is empty.

  @param q a pointer to an instance of the priqueue_t data structure
  @return pointer to element at the head of the queue
  @return NULL if the queue is empty
 */
void *priqueue_peek(priqueue_t *q)
{
	if(q->size == 0){
		return NULL;
	}else{
		return q->head->ptr;
	}
}


/**
  Retrieves and removes the head of this queue, or NULL if this queue
  is empty.

  @param q a pointer to an instance of the priqueue_t data structure
  @return the head of this queue
  @return NULL if this queue is empty
 */
void *priqueue_poll(priqueue_t *q)
{
	if(q->size == 0){
		return NULL;
	}else{
		void *ret;
		item *temp = q->head;
		q->head = temp->next;
		temp->next = NULL;
		ret = temp->ptr;
		q->size--;
		free(temp);
		return ret;
	}
}


/**
  Returns the element at the specified position in this list, or NULL if
  the queue does not contain an index'th element.

  @param q a pointer to an instance of the priqueue_t data structure
  @param index position of retrieved element
  @return the index'th element in the queue
  @return NULL if the queue does not contain the index'th element
 */
void *priqueue_at(priqueue_t *q, int index)
{
	if(index > q->size){
		return NULL;
	}else if(index == 0){
		return q->head->ptr;
	}else{
		item *temp = q->head;
		for(int i = 0; i < index; i++){
			temp = temp->next;
		}
		return temp->ptr;
	}
}


/**
  Removes all instances of ptr from the queue.

  This function should not use the comparer function, but check if the data contained in each element of the queue is equal (==) to ptr.

  @param q a pointer to an instance of the priqueue_t data structure
  @param ptr address of element to be removed
  @return the number of entries removed
 */
int priqueue_remove(priqueue_t *q, void *ptr)
{
	if(q->size == 0){
		return 0;
	}else{
		int numDeleted = 0;
		item *temp = q->head;
		item *temp2;
		for(int i = 0; i < q->size; i++){
			if(temp->ptr == ptr){
				if(temp == q->head){
					q->head = temp->next;
					free(temp);
					temp = q->head;
					numDeleted++;
				}else{
					temp2->next = temp->next;
					free(temp);
					temp = temp2->next;
					numDeleted++;
				}
			}else{
				temp2 = temp;
				temp = temp->next;
			}
		}
		q->size -= numDeleted;
		return numDeleted;
	}
}


/**
  Removes the specified index from the queue, moving later elements up
  a spot in the queue to fill the gap.

  @param q a pointer to an instance of the priqueue_t data structure
  @param index position of element to be removed
  @return the element removed from the queue
  @return NULL if the specified index does not exist
 */
void *priqueue_remove_at(priqueue_t *q, int index)
{
	if(index > q->size){
		return NULL;
	}else{
		item *temp = priqueue_at(q, index);
		item *temp2 = priqueue_at(q, index-1);
		if(temp2 != NULL){
			temp2->next = temp->next;
		}
		temp->next = NULL;
		free(temp);
		q->size--;
		return temp;
	}
}


/**
  Returns the number of elements in the queue.

  @param q a pointer to an instance of the priqueue_t data structure
  @return the number of elements in the queue
 */
int priqueue_size(priqueue_t *q)
{
	return q->size;
}


/**
  Destroys and frees all the memory associated with q.

  @param q a pointer to an instance of the priqueue_t data structure
 */
void priqueue_destroy(priqueue_t *q)
{
	item *temp = q->head;
	item *temp2;
	for(int i = 0; i < q->size; i++){
		temp2 = temp;
		temp = temp->next;
		free(temp2);
	}
}
